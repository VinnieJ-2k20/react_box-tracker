{"version":3,"sources":["components/Header/Header.jsx","components/ModeSelector/ModeSelector.jsx","components/Board/Board.jsx","components/Tracker/Tracker.jsx","App.jsx","helpers/api.js","index.js"],"names":["Header","appTitle","className","ModeSelector","modes","onModeSelection","useState","selectedMode","setSelectedMode","action","method","onSubmit","event","preventDefault","find","mode","name","id","value","onChange","target","required","map","size","type","Board","onBoxHover","boxes","setBoxes","innerStyle","setInnerStyle","useEffect","boxesArr","Array","from","keys","box","backgroundColor","paddingBottom","gridTemplateColumns","style","onMouseEnter","Tracker","log","entry","uuidv4","App","setModes","modesLoadingFailed","setModesLoadingFailed","activeMode","setActiveMode","positionLog","setPositionLog","fetchModes","useCallback","a","fetch","then","response","ok","Error","json","processModes","Object","key","replace","field","boxNum","rowNum","Math","ceil","colNum","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.15dd30a5.chunk.js","sourcesContent":["import React from 'react';\nimport './Header.scss';\n\nexport function Header({ appTitle }) {\n  return (\n    <header className=\"Header\">\n      <h1 className=\"Header__title\">\n        {appTitle}\n      </h1>\n    </header>\n  );\n}","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport './ModeSelector.scss';\n\nexport function ModeSelector({ modes, onModeSelection }) {\n  const [selectedMode, setSelectedMode] = useState('');\n  \n  function submitMode(event) {\n    event.preventDefault();\n    onModeSelection(modes.find(mode => mode.name === selectedMode));\n  }\n\n  return (\n    <form\n      action=\"#\"\n      method=\"POST\"\n      className=\"ModeSelector\"\n      onSubmit={submitMode}\n    >\n      <select\n        name=\"mode\"\n        id=\"mode\"\n        className=\"ModeSelector__select\"\n        value={selectedMode}\n        onChange={({ target }) => setSelectedMode(target.value)}\n        required\n      >\n        <option value=\"\">\n          Select mode\n        </option>\n        {modes.map(mode => (\n          <option value={mode.name} key={mode.size}>\n            {`${mode.name} mode: ${mode.size}`}\n          </option>\n        ))}\n      </select>\n      \n      <button\n        type=\"submit\"\n        className=\"ModeSelector__button\"\n      >\n        Start\n      </button>\n    </form>\n  );\n}\n\nModeSelector.propTypes = {\n  modes: PropTypes.arrayOf(PropTypes.shape({\n    name: PropTypes.string.isRequired,\n    size: PropTypes.number.isRequired,\n  })).isRequired,\n  onModeSelection: PropTypes.func.isRequired,\n};\n","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport './Board.scss';\n\nexport function Board({ size, onBoxHover }) {\n  const [boxes, setBoxes] = useState([]);\n  const [innerStyle, setInnerStyle] = useState({});\n\n  useEffect(() => {\n    const boxesArr = Array\n      .from(Array(size * size).keys())\n      .map(box => box + 1);\n    setBoxes(boxesArr);\n\n    if (size) {\n      setInnerStyle({\n        backgroundColor: 'black',\n        paddingBottom: '0',\n        gridTemplateColumns: `repeat(${size}, 1fr)`,\n      });\n    }\n  }, [size]);\n\n  return (\n    <div\n      className=\"Board\"\n      style={innerStyle}\n    >\n      {boxes.map(box => (\n        <div\n          key={box}\n          className=\"Board__box\"\n          onMouseEnter={() => onBoxHover(box)}\n        />\n      ))}\n    </div>\n  );\n}\n\nBoard.propTypes = {\n  size: PropTypes.number.isRequired,\n  onBoxHover: PropTypes.func.isRequired,\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { v4 as uuidv4 } from 'uuid';\nimport './Tracker.scss';\n\nexport function Tracker({ log }) {\n  return (\n    <div className=\"Tracker\">\n      <h2 className=\"Tracker__title\">\n        History\n      </h2>\n      <div className=\"Tracker__log\">\n        {log.map(entry => (\n          <p\n            key={uuidv4()}\n            className=\"Tracker__entry\"\n          >\n            {entry}\n          </p>\n        ))}\n      </div>\n    </div>\n  );\n}\n\nTracker.propTypes = {\n  log: PropTypes.arrayOf(PropTypes.string).isRequired,\n};\n","import React, { useState, useEffect, useCallback } from 'react';\nimport { Header } from './components/Header';\nimport { ModeSelector } from './components/ModeSelector';\nimport { Board } from './components/Board';\nimport { Tracker } from './components/Tracker';\nimport { getModes } from './helpers/api';\n\nimport './App.scss';\n\nexport function App() {\n  const APP_TITLE = 'Box Tracker - React App';\n  const [modes, setModes] = useState([]);\n  const [modesLoadingFailed, setModesLoadingFailed] = useState(false);\n  const [activeMode, setActiveMode] = useState({});\n  const [positionLog, setPositionLog] = useState([]);\n\n  useEffect(() => {\n    clearLog();\n  }, [activeMode])\n\n  const fetchModes = useCallback(async() => {\n    try {\n      const modes = await getModes();\n      setModes(processModes(modes));\n    } catch (error) {\n      setModesLoadingFailed(true);\n    }\n  }, []);\n\n  useEffect(() => {\n    fetchModes();\n  }, [fetchModes]);\n\n  function processModes(modes) {\n    return Object.keys(modes).map(key => (\n      {\n        name: key.replace('Mode', ''),\n        size: modes[key].field,\n      }\n    ));\n  }\n\n  function addEntryToLog(boxNum) {\n    const { size } = activeMode;\n    const rowNum = Math.ceil(boxNum / size);\n    const colNum = boxNum % size || size;\n\n    setPositionLog(positionLog => ([\n      `row: ${rowNum}, col: ${colNum}`,\n      ...positionLog,\n    ]));\n  };\n\n  function clearLog() {\n    setPositionLog([]);\n  }\n\n  return (\n    <div className=\"App\">\n      <div className=\"App__container\">\n        <Header appTitle={APP_TITLE} />\n\n        <main className=\"App__main\">\n          <div className=\"App__content\">\n            {modesLoadingFailed && (\n              <div className=\"App__loading-error\">\n                Failed loading modes from server\n              </div>\n            )}\n\n            <div className=\"App__selector\">\n              <ModeSelector\n                modes={modes}\n                onModeSelection={setActiveMode}\n              />\n            </div>\n\n            <Board\n              size={activeMode.size || 0}\n              onBoxHover={addEntryToLog}\n            />\n          </div>\n\n          <div className=\"App__sidebar\">\n            <Tracker log={positionLog}/>\n          </div>\n        </main>\n      </div>\n    </div>\n  );\n}\n","const BASE_URL = 'https://demo1030918.mockable.io/'\n\nexport function getModes() {\n  return fetch(`${BASE_URL}`)\n    .then((response) => {\n      if (!response.ok) {\n        throw new Error('Failed to load modes');\n      }\n\n      return response.json();\n    })\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}